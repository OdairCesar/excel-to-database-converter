#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
TESTE FINAL - Sistema de Convers√£o Universal Excel para Banco de Dados
Sistema completo de testes para verificar funcionalidades
"""

import os
import sys
import json
import tempfile
import shutil
from datetime import datetime
from pathlib import Path

# Adicionar src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def show_test_banner():
    """Mostra banner dos testes"""
    print("=" * 70)
    print("  TESTE FINAL - SISTEMA DE CONVERS√ÉO UNIVERSAL")
    print("=" * 70)
    print("  üß™ Testes automatizados completos")
    print("  üìä Verifica√ß√£o de funcionalidades")
    print("  üîß Diagn√≥stico de problemas")
    print("=" * 70)
    print()

def test_dependencies():
    """Testa depend√™ncias do sistema"""
    print("üîç Testando depend√™ncias...")
    
    required_modules = [
        'pandas', 'openpyxl', 'sqlalchemy'
    ]
    
    missing_modules = []
    for module in required_modules:
        try:
            __import__(module)
            print(f"   ‚úÖ {module}")
        except ImportError:
            missing_modules.append(module)
            print(f"   ‚ùå {module} - FALTANDO")
    
    if missing_modules:
        print(f"\n‚ùå Depend√™ncias faltando: {', '.join(missing_modules)}")
        print("üì¶ Instale com: pip install " + " ".join(missing_modules))
        return False
    
    print("‚úÖ Todas as depend√™ncias est√£o instaladas")
    return True

def test_structure():
    """Testa estrutura do projeto"""
    print("\nüèóÔ∏è  Testando estrutura do projeto...")
    
    required_files = [
        'main_converter.py',
        'config.json',
        'README.md',
        'src/convert_excel_universal_clean.py',
        'src/sql_schema_parser.py',
        'src/validation_system.py',
        'src/multi_database_generator.py'
    ]
    
    required_dirs = [
        'src',
        'schemas',
        'conversao_output'
    ]
    
    missing_files = []
    for file in required_files:
        if os.path.exists(file):
            print(f"   ‚úÖ {file}")
        else:
            missing_files.append(file)
            print(f"   ‚ùå {file} - FALTANDO")
    
    missing_dirs = []
    for dir in required_dirs:
        if os.path.exists(dir):
            print(f"   ‚úÖ {dir}/")
        else:
            missing_dirs.append(dir)
            print(f"   ‚ùå {dir}/ - FALTANDO")
    
    if missing_files or missing_dirs:
        print(f"\n‚ùå Arquivos/diret√≥rios faltando:")
        for item in missing_files + missing_dirs:
            print(f"   - {item}")
        return False
    
    print("‚úÖ Estrutura do projeto OK")
    return True

def test_config():
    """Testa arquivo de configura√ß√£o"""
    print("\n‚öôÔ∏è  Testando configura√ß√£o...")
    
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        required_keys = ['version', 'default_output_dir', 'encoding', 'supported_databases']
        for key in required_keys:
            if key in config:
                print(f"   ‚úÖ {key}: {config[key]}")
            else:
                print(f"   ‚ùå {key} - FALTANDO")
                return False
        
        print("‚úÖ Configura√ß√£o OK")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao ler config.json: {e}")
        return False

def test_modules():
    """Testa importa√ß√£o dos m√≥dulos"""
    print("\nüì¶ Testando m√≥dulos do sistema...")
    
    modules_to_test = [
        ('sql_schema_parser', 'SQLSchemaParser'),
        ('validation_system', 'ValidationError'),
        ('multi_database_generator', 'MultiDatabaseGenerator'),
        ('convert_excel_universal_clean', 'convert_excel_to_database')
    ]
    
    for module_name, class_or_function in modules_to_test:
        try:
            module = __import__(module_name)
            if hasattr(module, class_or_function):
                print(f"   ‚úÖ {module_name}.{class_or_function}")
            else:
                print(f"   ‚ùå {module_name}.{class_or_function} - FUN√á√ÉO/CLASSE N√ÉO ENCONTRADA")
                return False
        except ImportError as e:
            print(f"   ‚ùå {module_name} - ERRO DE IMPORTA√á√ÉO: {e}")
            return False
    
    print("‚úÖ Todos os m√≥dulos carregados")
    return True

def test_schema_parser():
    """Testa o parser de schemas SQL"""
    print("\nüîç Testando parser de schemas...")
    
    try:
        from sql_schema_parser import SQLSchemaParser
        
        # Criar schema de teste
        test_schema = """
        CREATE TABLE test_table (
            id INT PRIMARY KEY AUTO_INCREMENT,
            nome VARCHAR(255) NOT NULL,
            email VARCHAR(100) UNIQUE,
            idade INT DEFAULT 0,
            ativo BOOLEAN DEFAULT TRUE
        );
        """
        
        # Criar arquivo tempor√°rio
        with tempfile.NamedTemporaryFile(mode='w', suffix='.sql', delete=False) as f:
            f.write(test_schema)
            temp_file = f.name
        
        # Testar parser
        parser = SQLSchemaParser()
        result = parser.parse_file(temp_file)
        
        # Verificar resultado
        if result and 'table_name' in result and 'fields' in result:
            print(f"   ‚úÖ Tabela: {result['table_name']}")
            print(f"   ‚úÖ Campos: {len(result['fields'])}")
            for field, info in result['fields'].items():
                print(f"      - {field}: {info['type']}")
        else:
            print("   ‚ùå Resultado inv√°lido do parser")
            return False
        
        # Limpar arquivo tempor√°rio
        os.unlink(temp_file)
        
        print("‚úÖ Parser de schemas OK")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste do parser: {e}")
        return False

def test_validation():
    """Testa sistema de valida√ß√£o"""
    print("\n‚úÖ Testando sistema de valida√ß√£o...")
    
    try:
        from validation_system import SchemaValidator, ValidationError
        
        validator = SchemaValidator()
        
        # Testar valida√ß√£o de arquivo inexistente
        try:
            validator.validate_schema_file('arquivo_inexistente.sql')
            print("   ‚ùå Deveria ter falhado com arquivo inexistente")
            return False
        except ValidationError:
            print("   ‚úÖ Valida√ß√£o de arquivo inexistente OK")
        
        # Criar arquivo v√°lido tempor√°rio
        valid_schema = """
        CREATE TABLE usuarios (
            id INT PRIMARY KEY,
            nome VARCHAR(255)
        );
        """
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.sql', delete=False) as f:
            f.write(valid_schema)
            temp_file = f.name
        
        # Testar valida√ß√£o de arquivo v√°lido
        try:
            validator.validate_schema_file(temp_file)
            print("   ‚úÖ Valida√ß√£o de arquivo v√°lido OK")
        except ValidationError as e:
            print(f"   ‚ùå Arquivo v√°lido rejeitado: {e}")
            return False
        
        # Limpar arquivo tempor√°rio
        os.unlink(temp_file)
        
        print("‚úÖ Sistema de valida√ß√£o OK")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de valida√ß√£o: {e}")
        return False

def test_excel_conversion():
    """Testa convers√£o de Excel"""
    print("\nüîÑ Testando convers√£o de Excel...")
    
    try:
        import pandas as pd
        from convert_excel_universal_clean import convert_excel_to_database
        
        # Criar dados de teste
        test_data = {
            'nome': ['Jo√£o Silva', 'Maria Santos', 'Pedro Oliveira'],
            'email': ['joao@email.com', 'maria@email.com', 'pedro@email.com'],
            'idade': [25, 30, 35],
            'ativo': [True, True, False]
        }
        
        df = pd.DataFrame(test_data)
        
        # Criar arquivo Excel tempor√°rio
        with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as f:
            excel_file = f.name
        
        df.to_excel(excel_file, index=False)
        print(f"   ‚úÖ Arquivo Excel criado: {len(df)} registros")
        
        # Criar diret√≥rio de sa√≠da tempor√°rio
        temp_output_dir = tempfile.mkdtemp()
        
        # Testar convers√£o
        result = convert_excel_to_database(
            excel_file=excel_file,
            output_dir=temp_output_dir,
            schema_file=None,
            verbose=False,
            xlsx_only=False
        )
        
        if result is not None and not result.empty:
            print(f"   ‚úÖ Convers√£o realizada: {len(result)} registros processados")
            
            # Verificar arquivos gerados
            expected_files = ['csv', 'sql', 'xlsx']
            generated_files = []
            
            for file in os.listdir(temp_output_dir):
                for ext in expected_files:
                    if file.endswith(f'.{ext}'):
                        generated_files.append(ext)
                        print(f"   ‚úÖ Arquivo gerado: {file}")
            
            if len(generated_files) >= 2:  # Pelo menos 2 formatos
                print("‚úÖ Convers√£o de Excel OK")
                success = True
            else:
                print("‚ùå Poucos arquivos gerados")
                success = False
        else:
            print("‚ùå Convers√£o falhou")
            success = False
        
        # Limpar arquivos tempor√°rios
        os.unlink(excel_file)
        shutil.rmtree(temp_output_dir)
        
        return success
        
    except Exception as e:
        print(f"‚ùå Erro no teste de convers√£o: {e}")
        return False

def test_database_generation():
    """Testa gera√ß√£o de m√∫ltiplos bancos de dados"""
    print("\nüóÑÔ∏è  Testando gera√ß√£o de bancos de dados...")
    
    try:
        from multi_database_generator import MultiDatabaseGenerator
        import tempfile
        
        # Criar SQL de teste
        test_sql = """
        CREATE TABLE usuarios (
            id INT PRIMARY KEY AUTO_INCREMENT,
            nome VARCHAR(255) NOT NULL,
            email VARCHAR(100) UNIQUE,
            idade INT DEFAULT 0
        );
        
        INSERT INTO usuarios (nome, email, idade) VALUES ('Jo√£o', 'joao@email.com', 25);
        INSERT INTO usuarios (nome, email, idade) VALUES ('Maria', 'maria@email.com', 30);
        """
        
        # Criar arquivo SQL tempor√°rio
        with tempfile.NamedTemporaryFile(mode='w', suffix='.sql', delete=False) as f:
            f.write(test_sql)
            temp_sql_file = f.name
        
        # Criar diret√≥rio de sa√≠da tempor√°rio
        temp_output_dir = tempfile.mkdtemp()
        
        generator = MultiDatabaseGenerator()
        
        # Testar gera√ß√£o para todos os bancos
        results = generator.generate_for_all_databases(
            source_sql_file=temp_sql_file,
            output_dir=temp_output_dir,
            base_filename='test_usuarios'
        )
        
        # Verificar resultados
        success_count = 0
        for db_type, result in results.items():
            if result['status'] == 'success':
                print(f"   ‚úÖ {db_type.upper()}: {result['file']}")
                success_count += 1
            else:
                print(f"   ‚ùå {db_type.upper()}: {result.get('error', 'Unknown error')}")
        
        # Limpar arquivos tempor√°rios
        os.unlink(temp_sql_file)
        import shutil
        shutil.rmtree(temp_output_dir)
        
        if success_count >= 2:  # Pelo menos 2 bancos funcionando
            print("‚úÖ Gera√ß√£o de bancos de dados OK")
            return True
        else:
            print("‚ùå Poucos bancos funcionando")
            return False
        
    except Exception as e:
        print(f"‚ùå Erro no teste de gera√ß√£o: {e}")
        return False

def test_main_converter():
    """Testa o conversor principal"""
    print("\nüéØ Testando conversor principal...")
    
    try:
        # Importar e testar o m√≥dulo principal
        sys.path.insert(0, '.')
        import main_converter
        
        # Verificar se as fun√ß√µes principais existem
        required_functions = [
            'show_main_banner',
            'check_dependencies',
            'get_available_schemas',
            'convert_excel_mode'
        ]
        
        for func_name in required_functions:
            if hasattr(main_converter, func_name):
                print(f"   ‚úÖ {func_name}")
            else:
                print(f"   ‚ùå {func_name} - FUN√á√ÉO N√ÉO ENCONTRADA")
                return False
        
        # Testar verifica√ß√£o de depend√™ncias
        deps_ok = main_converter.check_dependencies()
        if deps_ok:
            print("   ‚úÖ Verifica√ß√£o de depend√™ncias OK")
        else:
            print("   ‚ùå Verifica√ß√£o de depend√™ncias falhou")
            return False
        
        # Testar listagem de schemas
        schemas = main_converter.get_available_schemas()
        print(f"   ‚úÖ Schemas dispon√≠veis: {len(schemas)}")
        
        print("‚úÖ Conversor principal OK")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste do conversor principal: {e}")
        return False

def run_all_tests():
    """Executa todos os testes"""
    print("üöÄ Iniciando testes completos...")
    print(f"üìÖ Data: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üìÇ Diret√≥rio: {os.getcwd()}")
    print()
    
    tests = [
        ("Depend√™ncias", test_dependencies),
        ("Estrutura", test_structure),
        ("Configura√ß√£o", test_config),
        ("M√≥dulos", test_modules),
        ("Parser de Schemas", test_schema_parser),
        ("Sistema de Valida√ß√£o", test_validation),
        ("Convers√£o Excel", test_excel_conversion),
        ("Gera√ß√£o de Bancos", test_database_generation),
        ("Conversor Principal", test_main_converter)
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå Erro cr√≠tico em {test_name}: {e}")
            failed += 1
    
    # Resultados finais
    print("\n" + "=" * 70)
    print("  RESULTADOS DOS TESTES")
    print("=" * 70)
    print(f"‚úÖ Testes aprovados: {passed}")
    print(f"‚ùå Testes falharam: {failed}")
    print(f"üìä Total de testes: {passed + failed}")
    
    if failed == 0:
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Sistema est√° funcionando corretamente")
        print("\nüöÄ Pronto para uso!")
    else:
        print(f"\n‚ö†Ô∏è  {failed} TESTE(S) FALHARAM")
        print("‚ùå Sistema pode ter problemas")
        print("\nüîß Verifique os erros acima e execute:")
        print("   python setup.py")
    
    print("=" * 70)
    
    return failed == 0

def main():
    """Fun√ß√£o principal"""
    show_test_banner()
    
    success = run_all_tests()
    
    if success:
        print("\nüí° PR√ìXIMOS PASSOS:")
        print("1. Execute: python main_converter.py --help")
        print("2. Teste com: python main_converter.py interactive")
        print("3. Veja exemplos em: README.md")
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
